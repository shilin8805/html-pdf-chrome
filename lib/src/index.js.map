{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport {launch, LaunchedChrome} from 'chrome-launcher';\nimport * as CDP from 'chrome-remote-interface';\n\nimport {ChromePrintOptions} from './ChromePrintOptions';\nimport * as CompletionTrigger from './CompletionTrigger';\nimport {CreateOptions} from './CreateOptions';\nimport {CreateResult} from './CreateResult';\n\nconst DEFAULT_CHROME_FLAGS = [\n    '--disable-gpu',\n    '--headless',\n    '--hide-scrollbars',\n];\n\nexport {CompletionTrigger, CreateOptions, CreateResult};\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n    const myOptions = Object.assign({}, options);\n    let chrome: LaunchedChrome;\n\n    myOptions._canceled = false;\n    if (myOptions.timeout >= 0) {\n        setTimeout(() => {\n            myOptions._canceled = true;\n        }, myOptions.timeout);\n    }\n\n    await throwIfCanceled(myOptions);\n    if (!myOptions.host && !myOptions.port) {\n        await throwIfCanceled(myOptions);\n        chrome = await launchChrome(myOptions);\n    }\n\n    try {\n        return await generate(html, myOptions);\n    } finally {\n        if (chrome) {\n            await chrome.kill();\n        }\n    }\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML or a URL.\n *\n * @param {string} html the HTML string or URL.\n * @param {CreateOptions} options the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions): Promise<CreateResult> {\n    await throwIfCanceled(options);\n    const tab = await CDP.New({port: options.port});\n    const client = await CDP({target: tab.id, port: options.port});\n    try {\n        const {Page} = client;\n        await Page.enable(); // Enable Page events\n        const url = /^(https?|file|data):/i.test(html) ? html : `data:text/html,${html}`;\n        await throwIfCanceled(options);\n        await Page.navigate({url});\n        await throwIfCanceled(options);\n        await Page.loadEventFired();\n        if (options.completionTrigger) {\n            await throwIfCanceled(options);\n            const waitResult = await options.completionTrigger.wait(client);\n            if (waitResult && waitResult.exceptionDetails) {\n                await throwIfCanceled(options);\n                throw new Error(waitResult.result.value);\n            }\n        }\n        await throwIfCanceled(options);\n        // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n        const pdf = await Page.printToPDF(options.printOptions);\n        await throwIfCanceled(options);\n        return new CreateResult(pdf.data);\n    } finally {\n        client.close();\n        await CDP.Close({id: tab.id, port: options.port });\n    }\n}\n\n/**\n * Throws an exception if the operation has been canceled.\n *\n * @param {CreateOptions} options the options which track cancellation.\n * @returns {Promise<void>} reject if canceled, resolve if not.\n */\nasync function throwIfCanceled(options: CreateOptions): Promise<void> {\n    if (options._canceled) {\n        throw new Error('HtmlPdf.create() timed out.');\n    }\n}\n\n/**\n * Launches Chrome with the specified options.\n *\n * @param {CreateOptions} options the options for Chrome.\n * @returns {Promise<LaunchedChrome>} The launched Chrome instance.\n */\nasync function launchChrome(options: CreateOptions): Promise<LaunchedChrome> {\n    const chrome = await launch({\n        port: options.port,\n        chromePath: options.chromePath,\n        chromeFlags: options.chromeFlags || DEFAULT_CHROME_FLAGS,\n    });\n    options.port = chrome.port;\n    return chrome;\n}\n"],"sourceRoot":"../.."}