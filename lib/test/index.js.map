{"version":3,"sources":["test/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// tslint:disable:no-unused-expression\n\nimport * as chai from 'chai';\nimport * as chromeLauncher from 'chrome-launcher';\nimport * as fs from 'fs';\nimport * as mockFs from 'mock-fs';\nimport * as path from 'path';\nimport * as PDFParser from 'pdf2json';\nimport * as sinon from 'sinon';\nimport { Readable } from 'stream';\nimport * as tcpPortUsed from 'tcp-port-used';\n\nimport * as HtmlPdf from '../src';\n\n// tslint:disable:no-var-requires\nchai.use(require('chai-string'));\nchai.use(require('sinon-chai'));\n// tslint:enable:no-var-requires\nconst expect = chai.expect;\n\ndescribe('HtmlPdf', () => {\n\n  describe('create', () => {\n    let port: number;\n    let chrome: chromeLauncher.LaunchedChrome;\n\n    before(async () => {\n      try {\n        // Start Chrome and wait for it to start listening for connections.\n        chrome = await chromeLauncher.launch({\n          chromeFlags: [\n            '--disable-gpu',\n            '--headless',\n          ],\n        });\n        port = chrome.port;\n        await tcpPortUsed.waitUntilUsed(port);\n      } catch (err) {\n        await chrome.kill();\n        throw err;\n      }\n    });\n\n    after(async () => {\n      await chrome.kill();\n    });\n\n    it('should spawn Chrome and generate a PDF', async () => {\n      const result = await HtmlPdf.create('<p>hello!</p>');\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n    });\n\n    it('should handle a Chrome launch failure', async () => {\n      let launchStub: sinon.SinonStub;\n      const error = new Error('failed!');\n      try {\n        launchStub = sinon.stub(chromeLauncher, 'launch').callsFake(() => Promise.reject(error));\n        await HtmlPdf.create('<p>hello!</p>');\n        expect.fail();\n      } catch (err) {\n        expect(err).to.equal(error);\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should use running Chrome to generate a PDF (specify port)', async () => {\n      const launchStub = sinon.stub(chromeLauncher, 'launch');\n      try {\n        const result = await HtmlPdf.create('<p>hello!</p>', {port});\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n        expect(launchStub).to.not.have.been.called;\n        const pdf = await getParsedPdf(result.toBuffer());\n        expect(pdf.getRawTextContent()).to.startWith('hello!');\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should use running Chrome to generate a PDF (specify host and port)', async () => {\n      const launchStub = sinon.stub(chromeLauncher, 'launch');\n      try {\n        const result = await HtmlPdf.create('<p>hello!</p>', {host: 'localhost', port});\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n        expect(launchStub).to.not.have.been.called;\n        const pdf = await getParsedPdf(result.toBuffer());\n        expect(pdf.getRawTextContent()).to.startWith('hello!');\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should generate a PDF with Chrome options', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        printOptions: {\n          landscape: true,\n          displayHeaderFooter: true,\n        },\n      };\n      const result = await HtmlPdf.create('<p>hello!</p>', options);\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n    });\n\n    it('should timeout', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        timeout: 0,\n      };\n      try {\n        await HtmlPdf.create('<p>hello!</p>', options);\n        expect.fail();\n      } catch (err) {\n        expect(err.message).to.equal('HtmlPdf.create() timed out.');\n      }\n    });\n\n    it('should generate a PDF with external JavaScript', async () => {\n      const html = `\n        <html>\n          <head>\n            <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"></script>\n          </head>\n          <body>\n            <div id=\"test\">Failed!</div>\n            <script>\n              $('#test').text('Passed!');\n            </script>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF with external CSS', async () => {\n      // #test:before{content:'Passed!';}\n      const html = `\n        <html>\n          <head>\n            <link rel=\"stylesheet\" href=\"data:text/css;charset=utf-8;base64,I3Rlc3Q6YmVmb3Jle2NvbnRlbnQ6J1Bhc3NlZCEnO30=\">\n          </head>\n          <body>\n            <div id=\"test\"></div>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF with multiple pages', async () => {\n      const html = `\n        <html>\n          <body>\n            <div style=\"page-break-after:always\">Page 1</div>\n            <div>Page 2</div>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.contain('Page (0) Break').and.to.contain('Page (1) Break');\n    });\n\n    it('should generate a PDF from a local file', async () => {\n      const filePath = path.join('file://', __dirname, '../../test/test.html');\n      const result = await HtmlPdf.create(filePath, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF from an external site', async () => {\n      const result = await HtmlPdf.create('https://m.facebook.com/', {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.contain('Facebook');\n    });\n\n    describe('CompletionTrigger', () => {\n\n      const timeoutErrorMessage = 'CompletionTrigger timed out.';\n\n      describe('Timer', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Passed!';\n                }, 100);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Timer(200),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Event', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Passed!';\n                  document.body.dispatchEvent(new Event('myEvent'));\n                }, 100);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent', null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong event', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent', '#test', 200),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent'),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Callback', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Timeout!';\n                  if (window.htmlPdfCb) {\n                    document.getElementById('test').innerHTML = 'Callback!';\n                    htmlPdfCb();\n                  }\n                }, 100);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback(null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong callback', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback('wrongCb', 200),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback(),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Callback!');\n        });\n\n      });\n\n      describe('Element', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  const inserted = document.createElement('div');\n                  inserted.id = 'inserted';\n                  inserted.innerText = 'Passed!';\n                  document.body.insertBefore(inserted, document.getElementById('test'));\n                }, 100);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#inserted', 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening for the wrong element', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#derp', 200),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#inserted'),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Variable', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Variable!';\n                  htmlPdfDone = true;\n                }, 100);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable(null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong variable', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable('wrongVar', 200),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable(),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Variable!');\n        });\n\n      });\n\n    });\n\n  });\n\n  describe('CreateResult', () => {\n\n    describe('constructor', () => {\n      it('should instanciate', () => {\n        const result = new HtmlPdf.CreateResult('');\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      });\n    });\n\n    describe('toBase64', () => {\n      it('should output a base64 string', () => {\n        const cr = new HtmlPdf.CreateResult('dGVzdA==');\n        expect(cr.toBase64()).to.equal('dGVzdA==');\n      });\n    });\n\n    describe('toBuffer', () => {\n      it('should output a Buffer', () => {\n        const cr = new HtmlPdf.CreateResult('dGVzdA==');\n        expect(cr.toBuffer()).to.deep.equal(Buffer.from('test'));\n      });\n    });\n\n    describe('toStream', () => {\n      it('should output a Readable Stream', () => {\n        const cr = new HtmlPdf.CreateResult('dGVzdA==');\n        const stream = cr.toStream();\n        expect(stream).to.be.an.instanceOf(Readable);\n      });\n\n      it('should output a valid Stream', (done) => {\n        const cr = new HtmlPdf.CreateResult('dGVzdA==');\n        const stream = cr.toStream();\n        let bytes = new Buffer('');\n        stream.on('data', (chunk) => {\n          bytes = Buffer.concat([bytes, chunk]);\n        });\n        stream.on('end', () => {\n          try {\n            expect(bytes).to.deep.equal(cr.toBuffer());\n            done();\n          } catch (err) {\n            done(err);\n          }\n        });\n      });\n    });\n\n    describe('toFile', () => {\n      it('should output a file', async () => {\n        try {\n          mockFs({\n            myDir: {},\n          });\n          const cr = new HtmlPdf.CreateResult('dGVzdA==');\n          const filePath = 'myDir/file.pdf';\n          await cr.toFile(filePath);\n          const stats = fs.statSync(filePath);\n          expect(stats.isFile()).to.be.true;\n          expect(stats.isDirectory()).to.be.false;\n          expect(stats.size).to.be.greaterThan(0);\n        } finally {\n          mockFs.restore();\n        }\n      });\n\n      it('should fail output to a nonexistent directory', async () => {\n        try {\n          mockFs();\n          const cr = new HtmlPdf.CreateResult('dGVzdA==');\n          await cr.toFile('myDir/file.pdf');\n          expect.fail();\n        } catch (err) {\n          expect(err.message).to.contain('no such file or directory');\n        } finally {\n          mockFs.restore();\n        }\n      });\n    });\n\n  });\n\n});\n\nasync function getParsedPdf(buffer: Buffer): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const pdfParser = new PDFParser(null, 1);\n    pdfParser.on('pdfParser_dataError', (err) => reject(err.parserError));\n    pdfParser.on('pdfParser_dataReady', () => resolve(pdfParser));\n    pdfParser.parseBuffer(buffer);\n  });\n}\n"],"sourceRoot":"../.."}